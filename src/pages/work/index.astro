---
import Layout from "../../layouts/Layout.astro";
import CodingWrapped from "../../components/CodingStats/CodingWrapped.astro";

type TileType = "current" | "past" | "study" | "side" | "background";
interface Tile {
  company: string;
  title: string;
  desc: string;
  links: string[];
  linkTitles: string[];
  imageSrc: string;
  type: TileType;
  internal?: boolean;
}

const tileHeaders: Record<TileType, string> = {
  background: "My background",
  current: "Currently contributing to",
  past: "Previously worked on",
  study: "Continuously pursuing knowledge",
  side: "Highlighted side projects",
};

const tileSectionIds: Record<TileType, string> = Object.fromEntries(
  Object.keys(tileHeaders).map((k) => [k as TileType, k])
) as Record<TileType, string>;

const tiles: Tile[] = [
  {
    company: "Flipp",
    title: "Senior Software Engineer",
    desc: "Helping North Americans shop smarter",
    links: ["https://flipp.com/home/"],
    linkTitles: ["Visit"],
    imageSrc: "/work/flipp.png",
    type: "current",
  },
  {
    company: "Careerfoundry",
    title: "Web development mentor",
    desc: "Mentoring the next generation of web developers",
    links: ["https://careerfoundry.com/"],
    linkTitles: ["Visit"],

    imageSrc: "/work/cf.jpg",
    type: "current",
  },
  {
    company: "Moonfare",
    title: "Software development engineer",
    desc: "Developed an investment platform for private equity",
    links: ["https://moonfare.com/"],
    linkTitles: ["Visit"],

    imageSrc: "/work/moonfare.jpeg",
    type: "past",
  },
  {
    company: "Diginex",
    title: "Full stack developer",
    desc: "Developed a cryptocurrency data aggregation and trading platform",
    links: ["https://www.diginex.com/"],
    linkTitles: ["Visit"],

    imageSrc: "/work/diginex.png",
    type: "past",
  },
  {
    company: "Relotalent",
    title: "Contract developer",
    desc: "Developed an expat compensation and tax calculation engine",
    links: ["https://www.relotalent.com/salary-calculator"],
    linkTitles: ["Visit"],

    imageSrc: "/work/relotalent.png",
    type: "past",
  },
  {
    company: "",
    title: "Books",
    desc: "My reading list of software engineering and adjacent books",
    links: ["https://github.com/users/mtanzim/projects/9"],
    linkTitles: ["Visit"],

    imageSrc: "/work/books.png",
    type: "study",
  },
  {
    company: "",
    title: "Courses",
    desc: "My list of online courses past and present",
    links: ["https://github.com/users/mtanzim/projects/4"],
    linkTitles: ["Visit"],

    imageSrc: "/work/courses.png",
    type: "study",
  },
  {
    company: "",
    title: "Side projects",
    desc: "Projects to explore new tools, techniques or for fun",
    links: ["https://github.com/users/mtanzim/projects/5"],
    linkTitles: ["Visit"],

    imageSrc: "/work/side.png",
    type: "study",
  },
  {
    company: "",
    title: "Spotify listening habits",
    desc: "See what you've been listening to",
    imageSrc: "/work/spotify-side.png",
    links: [
      "https://spotify-personal-ybmvkz22xq-uc.a.run.app",
      "https://github.com/mtanzim/spotify-data",
    ],
    linkTitles: ["App", "Code"],

    type: "side",
  },
  {
    company: "",
    title: "Strong visualizer",
    desc: "Visualize progress from Strong app csvs",
    imageSrc: "/work/muscle.png",
    links: [
      "https://vis-strong-go-ghfzoy3ovq-ue.a.run.app/",
      "https://github.com/mtanzim/vis-strong-go",
    ],
    linkTitles: ["App", "Code"],
    type: "side",
  },
  {
    company: "",
    title: "Wakatime dashboard",
    desc: "Persist wakatime data and provide a visualization dashboard",
    imageSrc: "/work/wall-clock.png",
    links: ["https://github.com/mtanzim/guac"],
    linkTitles: ["Code"],

    type: "side",
  },
  {
    company: "",
    title: "My story",
    desc: "Learn about my career switch to web development",
    imageSrc: "/tanzim.jpg",
    links: ["/work/story"],
    linkTitles: ["Visit"],

    type: "background",
    internal: true,
  },
  {
    company: "",
    title: "My resume",
    desc: "Get my detailed work history",
    imageSrc: "/work/story/berlin/3.jpg",
    links: ["/work/resume"],
    linkTitles: ["Visit"],
    type: "background",
    internal: true,
  },
  {
    company: "",
    title: "Podcast",
    desc: "Listen to a podcast episode where I discuss self studying software engineering, staying productive during long term travel, and the tech scene in Berlin",
    imageSrc: "/work/podcast.png",
    links: [
      "https://open.spotify.com/episode/5u3gXFNGomUkKimQHE9sgG?si=Op9ZjqG-RcuyWr9Uek2TvA",
    ],
    linkTitles: ["Visit"],

    type: "background",
  },
];

const progLangHeader = "Languages in current use";
const progLangId = "languages";
---

<Layout title="Work">
  <div class="tabs tabs-boxed justify-center">
    {
      Object.keys(tileHeaders).map((id) => (
        <a class="tab mx-2" href={`#${id}`}>
          {tileHeaders[id as TileType]}
        </a>
      ))
    }
    <a class="mx-2 tab" href={`#${progLangId}`}>{progLangHeader}</a>
  </div>
  <div class="flex mb-4 flex-wrap justify-center">
    {
      Object.keys(tileHeaders).map((tileType) => (
        <div class="flex flex-col p-2 my-6">
          <h1 id={tileSectionIds[tileType as TileType]} class="text-2xl my-12">
            {tileHeaders[tileType as TileType]}
          </h1>
          <div class="mb-4 flex flex-wrap mx-auto">
            {tiles
              .filter((t) => t.type === tileType)
              .map((tile) => (
                <div class="card flex-initial w-64 bg-base-400 shadow-xl m-4 mx-auto">
                  <figure>
                    <a
                      target={tile.internal ? "" : "_blank"}
                      href={tile.links[0] ?? "/"}
                    >
                      <img
                        class="object-cover h-36 w-36"
                        src={tile.imageSrc}
                        alt={tile.company}
                      />
                    </a>
                  </figure>
                  <div class="card-body">
                    <h2 class="card-title">{tile.title}</h2>
                    <p>{tile.desc}</p>
                    <div class="card-actions justify-end">
                      {tile.links.map((link, idx) => (
                        <a target={tile.internal ? "" : "_blank"} href={link}>
                          <div
                            class={`badge badge-${
                              idx === 0 ? "secondary" : "info"
                            } badge-lg`}
                          >
                            {tile.linkTitles?.[idx] || "Visit"}
                          </div>
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      ))
    }
    {
      (
        <div class="flex flex-col p-2 my-6 w-full mx-auto">
          <h1 id={progLangId} class="text-2xl my-12">
            {progLangHeader}
          </h1>
          {import.meta.env.MODE === "development" ? (
            <p class="text-6xl">
              Guac will go here but lets not blow up my cheap serverless setup
            </p>
          ) : (
            <CodingWrapped />
          )}
        </div>
      )
    }
  </div>
</Layout>
